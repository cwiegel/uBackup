#!/bin/bash
# uBackup script for Ubuntu
#
# uBackup is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License.
#
# uBackup is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# Copyright 2009: Reto Glauser aka blinkeye
# Copyright 2011: Christian Wiegel aka parado
# Homepage: http://prifact.de/dl/uBackup
# Date: 06.03.2013

if [ "$(id -u)" != "0" ]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi

version=v1.0
basename=`basename $0`
 
find=/usr/bin/find
tar=/bin/tar
 
# these are the commands we actually need for the backup
command_list=(apt-get cut date echo $find grep gzip hostname mount p7zip sh split $tar umount uname which)
 
# verify that each command we use exists. if one can't be found use $PATH and make a suggestion if possible.
for command in ${command_list[@]}; do
        if [ ! -x "`which $command 2>&1`" ]; then
                echo -e "\nERROR: $command not found! "
                echo -e "\nTrying to install the missing depencies"
		echo -e "Syncing apt cache"
		apt-get update > /dev/null
                echo -e "installing the depencies"
                apt-get install -y coreutils findutils gzip hostname mount p7zip dash tar debianutils > /dev/null
		echo -e "$command is ready to use now.\n"
                base=`basename $command`
                if [ "`which $base 2>&1 | grep "no \`basename $command\` in"`" != "" ]; then
                        echo -e "ERROR: $base is not in your \$PATH."
                fi
                exit -1
        fi
done
 
help="\nUsage:\n`basename $0` [[-v]|[--verbose]] [[-s]|[--split]] [[-rh]|[--restore-help]] \n\nTo run the script NOT in verbose mode comes in handy if you want to see only the errors that occur during the backup.\n"

restorehelp="\nRestore information:\n\nBoot off a live-cd and repartition your harddisks and create filesystems as necessary\n(make sure you remove all remaining files of your to-be-intallation).\n\nIf you are stored the backup to CD or DVD\n $ umount /mnt/cdrom\n Now remove the live-cd and insert the cd with the Backup\n $ mkdir /mnt/backup\n $ mount /dev/cdrom /mnt/backup\n\nIf the uBackup files are stored to an other partition or media like USB mount this media\n $ mkdir /mnt/backup\n $ mount /dev/sdbX /mnt/backup\n Note: Replace sdbX by the Volume where the backup files are on\n\nNow we can start to restore the backup\n $ mkdir /mnt/ubuntu\n $ mount /dev/sdaX /mnt/ubuntu\n Note: Replace sdaX by the root partitions name\n $ mkdir /mnt/ubuntu/boot\n $ mount /dev/sdaX /mnt/ubuntu/boot\n Note: Replace sdaX by the boot partitions name\nChoice the right command, for an gzip compression (tar.gz file) use\n $ tar xzvpf /mnt/backup/host-uBackup-23.05.2011-custom.tar.gz -C /mnt/ubuntu/\nIf the backup is stored in 7zip format (tar.xz file) use\n $ tar xJvpf /mnt/backup/host-uBackup-23.05.2011-custom.tar.xz -C /mnt/ubuntu/\n $ mount -t proc none /mnt/ubuntu/proc\n $ mount -o bind /dev /mnt/ubuntu/dev\n $ chroot /mnt/ubuntu /bin/sh\n\nIf in need adjust necessary files (/etc/fstab, /boot/grub/grub.conf) and/or install grub\n $ apt-get update\n $ grub-install --no-floppy /dev/sdaX\n Note: Replace sdaX by the boot partitions name\n\nNow we are finished the restore, lets prepare for booting the system now \n $ exit\n $ cd /\n $ umount /mnt/cdrom\n Remove the backup cd\n $ umount /mnt/ubuntu/boot\n $ umount /mnt/ubuntu/dev\n $ umount /mnt/ubuntu/proc\n $ umount /mnt/ubuntu\n $ reboot\n"
 
# Defaults to creating one tarball
tar_output="--file"
 
# split command
split_options="--suffix-length=1 --bytes=100m"
 
# options for the tar command
tarOptions=" --preserve-permissions --create --absolute-names --totals --ignore-failed-read"
 
# where to put the uBackup
uBackupLocation=/mnt/backup
 
# name prefix
uBackupprefix=`hostname`-backup-`date +\%d.\%m.\%Y`
 
# patterns which should not be backed up (like iso files).
# example: default_exclude_pattern="*.iso *.divx"
# These pattern count only for files NOT listed in the $custom_include_list.
default_exclude_pattern=""
 
# these files/directories are always excluded. don't add trailing slashes.
# don't touch it unless you know what you are doing!
# in $default_include_folders
default_exclude_list="
/dev
/lost+found
/mnt
/proc
/sys
/tmp
/usr/src
/var/log
/var/tmp
/var/cache/apt/archives
$uBackupLocation
`echo $CCACHE_DIR`"
 
# files/devices/folders, which need to be backed up (preserve folder structure).
# don't touch it unless you know what you are doing! no recursive backup of folders.
# use $default_include_folders instead.
default_include_files="
/dev/null
/dev/console
/home
/mnt
`find /mnt -name .keep`
/proc
/sys
/tmp
/usr/src
/var/cache/apt"
 
# folders, which need to be backed up recursively on every backup.
# don't touch it unless you know what you are doing!
default_include_folders=""
 
# IMPORTANT: A minimal backup will EXCLUDE files/folders listed here. A custom backup will
# include/exclude these files/folders depening on your answer.
custom_include_list="
/home/*"
 
# add files/folders here which are subfolders of a folder listed in $custom_include_list which should NOT
# be backed up. eg.
#custom_exclude_list="/home/foo/mp3 /home/foo/downloads /home/foo/.*"
custom_exclude_list=""
 
# Only files/folders within the $custom_include_list are checked against these patterns
# custom_exclude_pattern="*.mp3 *.iso"
custom_exclude_pattern=""
 
# the find_command
find_command="$find /*"
 
# don't backup anything which matches pattern listed in $default_exclude_pattern
for pattern in $default_exclude_pattern; do
        find_command="$find_command -not -name $pattern"
done
 
# assemble the find_command
function find_files()
{
        for folder in $default_exclude_list; do
                find_command="$find_command -path $folder -prune -o"
        done
 
        find_command="$find_command -print"
 
        for i in $default_include_files; do
                find_command="echo $i; $find_command"
        done
 
        for i in $default_include_folders; do
                if [ -d $i ]; then
                        find_command="$find $i; $find_command"
                else
                        find_command="echo $i; $find_command"
                fi
        done
}
 
# check the exclude/include variables for non-existing entries
function verify()
{
        for i in $1; do
                if [ ! -e "`echo "$i" | cut -d'=' -f2 | cut -d'*' -f1`" -a "$i" != "/lost+found" -a "$i" != "$uBackupLocation" ]; then
                        echo "ERROR: `echo "$i" | cut -d'=' -f2` not found! Check your "$2
                        exit 0
                fi
        done
}
 
# check input parameters
while [ $1 ]; do
        case  $1 in
        "-h" | "--help")
                echo -e $help
                exit 0;;
        "-rh" | "--restore-help")
                echo -e $restorehelp
                exit 0;;
        "-v" | "--verbose")
                verbose=$1;;
        "-s" | "--split")
                tar_output="--split";;
        "");;
        *)
                echo -e $help
                exit 0;;
        esac
        shift
done
 
echo ""
 
# check folder/files listed in $default_exclude_list exist
verify "$default_exclude_list" "\$default_exclude_list"
 
# check files listed in $default_include_files exist
verify "$default_include_files" "\$default_include_files"
 
# check folder listed in $default_include_folders exist
verify "$default_include_folders" "\$default_include_folders"
 
#check folder listed in $custom_include_list exist
verify "$custom_include_list" "\$custom_include_list"
 
#check folder listed in $custom_exclude_list exist
verify "$custom_exclude_list" "\$custom_exclude_list"
 
# print out the version
 echo -e "\nuBackup script $version"
 echo -e "======================================================"
 
# how do you want to backup?
echo -e "\nHow do you want to backup? Make your choice...
(Use CTRL+C to abort)\n
fast backup, medium compression (tar.gz):
 [1] Minimal
 [2] Interactive
 
backup can take some time, high compression (tar.xz):
 [3] Minimal
 [4] Interactive\n"
 
while [ "$option" != '1' -a "$option" != '2' -a "$option" != '3' -a "$option" != '4' ]; do
        echo -en "Option: "
        read option
done
 
case $option in
[1,3])
        uBackupName=$uBackupLocation/$uBackupprefix-minimal.tar;;
 
[2,4])
        uBackupName=$uBackupLocation/$uBackupprefix-custom.tar
 
        for folder in $custom_include_list; do
                echo -en "\nDo you want to backup" `echo "$folder" | cut -d'=' -f2`"? (y/n) "
                read answer
                while [ "$answer" != 'y' -a "$answer" != 'n' ]; do
                        echo -en "Do you want to backup" `echo "$folder" | cut -d'=' -f2`"? (y/n) "
                        read answer
                done
                if [ "$answer" == 'n' ]; then
                        find_command="$find_command -path $folder -prune -o"
                else
                        custom_find="$find $folder"
                        for i in $custom_exclude_pattern; do
                                custom_find="$custom_find -name $i -o"
                        done
                        for i in $custom_exclude_list; do
                                custom_find="$custom_find -path $i -prune -o"
                        done
                        find_command="$custom_find -print; $find_command"
                fi
        done ;;
esac
 
# add $custom_include_list to the $default_exclude_list as we assembled
# $custom_find with $custom_include_list already.
default_exclude_list="$default_exclude_list $custom_include_list"
 
case $option in
[1,2])
        uBackuppostfix="gz"
        zip="--gzip";;
 
[3,4])
        uBackuppostfix="xz"
        zip="--xz";;
esac
 
# mount boot
echo -e "\n* mounting boot"
mount /boot >/dev/null 2>&1
 
# find the files/folder to backup
find_files
find_command="($find_command)"
 
# create the final command
if [ "$tar_output" == "--file" ]; then
        tar_command="$find_command | $tar $zip $tarOptions $verbose --file $uBackupName.$uBackuppostfix --no-recursion -T -"
else
        tar_command="$find_command | $tar $zip $tarOptions $verbose --no-recursion -T - | split $split_options - "$uBackupName.$uBackuppostfix"_"
fi
 
if [ "$verbose" ]; then
        echo -e "\n* creating the backup in $uBackupLocation with the following command:\n\n"$tar_command
fi
 
# everything is set, are you sure to continue?
echo -ne "\nDo you want to continue? (y/n) "
read answer
while [ "$answer" != 'y' ] && [ "$answer" != 'n' ]; do
        echo -ne "Do you want to continue? (y/n) "
        read answer
done
 
if [ "$answer" == 'y' ]; then
        # check whether the file already exists.
        if [ "$tar_output" == "--split" ]; then
                overwrite="`ls "$uBackupName.$uBackuppostfix"_* 2>&1 | grep -v 'No such file'`"
        else
                overwrite="$uBackupName.$uBackuppostfix"
        fi
 
        if [ -a "`echo "$overwrite" | grep "$overwrite" -m1`" ]; then
                echo -en "\nDo you want to overwrite $overwrite? (y/n) "
                read answer
                while [ "$answer" != 'y' ] && [ "$answer" != 'n' ]; do
                        echo -en "Do you want to overwrite $overwrite? (y/n) "
                        read answer
                done
                if [ "$answer" == 'n' ]; then
                        echo -e "\n* There's nothing to do ... Exiting"
                        exit 0;
                fi
        fi
 
        # if necessary, create the uBackupLocation
        if [ ! -d "$uBackupLocation" ] ; then
                echo "* creating directory $uBackupLocation"
                mkdir -p $uBackupLocation
        fi
 
        echo -e "\n* Please wait while the backup is being created.\n"
 
        # do the backup.
        sh -c "$tar_command"
 
        # finished, clean up
        echo -e "\n* backup is done"
        echo "* umounting boot"
        umount /boot >/dev/null 2>&1
 
        # Integrity check
        echo -e "* Checking integrity"
        if [ "$zip" == "--gzip" ]; then
                zip="gzip"
        else
                zip="xz"
        fi
 
        if [ "$tar_output" == "--split" ]; then
                if [ "`cat "$uBackupName.$uBackuppostfix"_*"" | $zip --test 2>&1`" != "" ]; then
                        echo -e "* Integrity check failed. Re-run the script and check your hardware."
                        exit -1
                fi
        else
                if [ "`$zip --test  $uBackupName.$uBackuppostfix 2>&1`" != "" ]; then
                        echo -e "* Integrity check failed. Re-run the script and check your hardware."
                        exit -1
                fi
        fi
 
        # everything went smoothly
        echo -e "* Everything went smoothly. You successfully created a backup."
 
else
        echo -e "\n* There's nothing to do ... Exiting"
fi


